(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{663:function(t,a,s){"use strict";s.r(a);var r=s(11),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"块引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#块引用"}},[t._v("#")]),t._v(" 块引用")]),t._v(" "),s("h2",{attrs:{id:"常用于引用文本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用于引用文本"}},[t._v("#")]),t._v(" 常用于引用文本")]),t._v(" "),s("h3",{attrs:{id:"文本摘自《深入理解计算机系统》p27"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文本摘自《深入理解计算机系统》p27"}},[t._v("#")]),t._v(" 文本摘自《深入理解计算机系统》P27")]),t._v(" "),s("p",[t._v("令人吃惊的是，在哪种字节顺序是合适的这个问题上，人们表现得非常情绪化。实际上术语“little endian”（小端）和“big endian”（大端）出自Jonathan Swift的《格利佛游记》一书，其中交战的两个派别无法就应该从哪一端打开一个半熟的鸡蛋达成一致。因此，争论沦为关于社会政治的争论。只要选择了一种规则并且始终如一的坚持，其实对于哪种字节排序的选择都是任意的。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("“端”（endian）的起源")]),s("br"),t._v("\n以下是Jonathan Swift在1726年关于大小端之争历史的描述："),s("br"),t._v("\n“……下面我要告诉你的是，Lilliput和Blefuscu这两大强国在过去36个月里一直在苦战。战争开始是由于以下的原因：我们大家都认为，吃鸡蛋前，原始的方法是打破鸡蛋较大的一端，可是当今的皇帝的祖父小时候吃鸡蛋，一次按古法打鸡蛋时碰巧将一个手指弄破了，因此他的父亲，当时的皇帝，就下了一道敕令，命令全体臣民吃鸡蛋时打破较小的一端，违令者重罚。”")])]),t._v(" "),s("h2",{attrs:{id:"块引用有多级结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#块引用有多级结构"}},[t._v("#")]),t._v(" 块引用有多级结构")]),t._v(" "),s("h3",{attrs:{id:"语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"custom-style-wrapper window-controls"},[s("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",width:"54",height:"14",viewBox:"0 0 54 14"}},[s("g",{attrs:{fill:"none","fill-rule":"evenodd",transform:"translate(1 1)"}},[s("circle",{attrs:{cx:"6",cy:"6",r:"6",fill:"#FF5F56",stroke:"#E0443E","stroke-width":".5"}}),s("circle",{attrs:{cx:"26",cy:"6",r:"6",fill:"#FFBD2E",stroke:"#DEA123","stroke-width":".5"}}),s("circle",{attrs:{cx:"46",cy:"6",r:"6",fill:"#27C93F",stroke:"#1AAB29","stroke-width":".5"}})])])]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("> 数据结构\n>> 树\n>>> 二叉树\n>>>> 平衡二叉树\n>>>>> 满二叉树\n")])]),t._v(" "),s("CodeResult",{attrs:{lang:"",code:"%3E%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%0A%3E%3E%20%E6%A0%91%0A%3E%3E%3E%20%E4%BA%8C%E5%8F%89%E6%A0%91%0A%3E%3E%3E%3E%20%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%0A%3E%3E%3E%3E%3E%20%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91"}})],1),s("h3",{attrs:{id:"效果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#效果"}},[t._v("#")]),t._v(" 效果")]),t._v(" "),s("blockquote",[s("p",[t._v("数据结构")]),t._v(" "),s("blockquote",[s("p",[t._v("树")]),t._v(" "),s("blockquote",[s("p",[t._v("二叉树")]),t._v(" "),s("blockquote",[s("p",[t._v("平衡二叉树")]),t._v(" "),s("blockquote",[s("p",[t._v("满二叉树")])])])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);